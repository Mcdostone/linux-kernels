Cannot parse arch/microblaze/Kconfig: Parsing Error: Error { input: LocatedSpan { offset: 955, line: 64, fragment: "source \"arch/microblaze/platform/Kconfig.platform\"\n\nmenu \"Processor type and features\"\n\nsource kernel/time/Kconfig\n\nsource \"kernel/Kconfig.preempt\"\n\nsource \"kernel/Kconfig.hz\"\n\nconfig MMU\n    def_bool n\n\nconfig NO_MMU\n    bool\n    depends on !MMU\n    default y\n\ncomment \"Boot options\"\n\nconfig CMDLINE_BOOL\n    bool \"Default bootloader kernel arguments\"\n\nconfig CMDLINE\n    string \"Default kernel command string\"\n    depends on CMDLINE_BOOL\n    default \"console=ttyUL0,115200\"\n    help\n      On some architectures there is currently no way for the boot loader\n      to pass arguments to the kernel. For these architectures, you should\n      supply some command-line options at build time by entering them\n      here.\n\nconfig CMDLINE_FORCE\n    bool \"Force default kernel command string\"\n    depends on CMDLINE_BOOL\n    default n\n    help\n      Set this to have arguments from the default kernel command string\n      override those passed by the boot loader.\n\nconfig OF\n    def_bool y\n\nconfig OF_DEVICE\n    def_bool y\n\nconfig PROC_DEVICETREE\n    bool \"Support for device tree in /proc\"\n    depends on PROC_FS\n    help\n      This option adds a device-tree directory under /proc which contains\n      an image of the device tree that the kernel copies from Open\n      Firmware or other boot firmware. If unsure, say Y here.\n\nendmenu\n\nsource \"mm/Kconfig\"\n\nmenu \"Exectuable file formats\"\n\nsource \"fs/Kconfig.binfmt\"\n\nendmenu\n\nsource \"net/Kconfig\"\n\nsource \"drivers/Kconfig\"\n\nsource \"fs/Kconfig\"\n\nsource \"arch/microblaze/Kconfig.debug\"\n\nsource \"security/Kconfig\"\n\nsource \"crypto/Kconfig\"\n\nsource \"lib/Kconfig\"\n", extra: KconfigFile { root_dir: "/home/yannp/Documents/linux-kernels/kernels/2.6.30", file: "arch/microblaze/Kconfig", fail_on_missing_source: true } }, code: Eof }
thread 'main' panicked at 'explicit panic', src/main.rs:76:17
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
Cannot parse arch/frv/Kconfig: Parsing Error: Error { input: LocatedSpan { offset: 10049, line: 392, fragment: "source \"drivers/Kconfig\"\n\nsource \"fs/Kconfig\"\n\nsource \"arch/frv/Kconfig.debug\"\n\nsource \"security/Kconfig\"\n\nsource \"crypto/Kconfig\"\n\nsource \"lib/Kconfig\"\n", extra: KconfigFile { root_dir: "/home/yannp/Documents/linux-kernels/kernels/2.6.32", file: "arch/frv/Kconfig", fail_on_missing_source: true } }, code: Eof }
thread 'main' panicked at 'explicit panic', src/main.rs:76:17
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
Cannot parse arch/microblaze/Kconfig: Parsing Error: Error { input: LocatedSpan { offset: 1220, line: 70, fragment: "source \"arch/microblaze/platform/Kconfig.platform\"\n\nmenu \"Processor type and features\"\n\nsource \"kernel/time/Kconfig\"\n\nsource \"kernel/Kconfig.preempt\"\n\nsource \"kernel/Kconfig.hz\"\n\nconfig MMU\n    bool \"MMU support\"\n    default n\n\nconfig NO_MMU\n    bool\n    depends on !MMU\n    default y\n\ncomment \"Boot options\"\n\nconfig CMDLINE_BOOL\n    bool \"Default bootloader kernel arguments\"\n\nconfig CMDLINE\n    string \"Default kernel command string\"\n    depends on CMDLINE_BOOL\n    default \"console=ttyUL0,115200\"\n    help\n      On some architectures there is currently no way for the boot loader\n      to pass arguments to the kernel. For these architectures, you should\n      supply some command-line options at build time by entering them\n      here.\n\nconfig CMDLINE_FORCE\n    bool \"Force default kernel command string\"\n    depends on CMDLINE_BOOL\n    default n\n    help\n      Set this to have arguments from the default kernel command string\n      override those passed by the boot loader.\n\nconfig SECCOMP\n    bool \"Enable seccomp to safely compute untrusted bytecode\"\n    depends on PROC_FS\n    default y\n    help\n      This kernel feature is useful for number crunching applications\n      that may need to compute untrusted bytecode during their\n      execution. By using pipes or other transports made available to\n      the process as file descriptors supporting the read/write\n      syscalls, it's possible to isolate those applications in\n      their own address space using seccomp. Once seccomp is\n      enabled via /proc/<pid>/seccomp, it cannot be disabled\n      and the task is only allowed to execute a few safe syscalls\n      defined by each seccomp mode.\n\n      If unsure, say Y. Only embedded should say N here.\n\nendmenu\n\nmenu \"Advanced setup\"\n\nconfig ADVANCED_OPTIONS\n    bool \"Prompt for advanced kernel configuration options\"\n    help\n      This option will enable prompting for a variety of advanced kernel\n      configuration options.  These options can cause the kernel to not\n      work if they are set incorrectly, but can be used to optimize certain\n      aspects of kernel memory management.\n\n      Unless you know what you are doing, say N here.\n\ncomment \"Default settings for advanced configuration options are used\"\n    depends on !ADVANCED_OPTIONS\n\nconfig XILINX_UNCACHED_SHADOW\n    bool \"Are you using uncached shadow for RAM ?\"\n    depends on ADVANCED_OPTIONS && !MMU\n    default n\n    help\n      This is needed to be able to allocate uncachable memory regions.\n      The feature requires the design to define the RAM memory controller\n      window to be twice as large as the actual physical memory.\n\nconfig HIGHMEM_START_BOOL\n    bool \"Set high memory pool address\"\n    depends on ADVANCED_OPTIONS && HIGHMEM\n    help\n      This option allows you to set the base address of the kernel virtual\n      area used to map high memory pages.  This can be useful in\n      optimizing the layout of kernel virtual memory.\n\n      Say N here unless you know what you are doing.\n\nconfig HIGHMEM_START\n    hex \"Virtual start address of high memory pool\" if HIGHMEM_START_BOOL\n    depends on MMU\n    default \"0xfe000000\"\n\nconfig LOWMEM_SIZE_BOOL\n    bool \"Set maximum low memory\"\n    depends on ADVANCED_OPTIONS && MMU\n    help\n      This option allows you to set the maximum amount of memory which\n      will be used as \"low memory\", that is, memory which the kernel can\n      access directly, without having to set up a kernel virtual mapping.\n      This can be useful in optimizing the layout of kernel virtual\n      memory.\n\n      Say N here unless you know what you are doing.\n\nconfig LOWMEM_SIZE\n    hex \"Maximum low memory size (in bytes)\" if LOWMEM_SIZE_BOOL\n    default \"0x30000000\"\n\nconfig KERNEL_START_BOOL\n    bool \"Set custom kernel base address\"\n    depends on ADVANCED_OPTIONS\n    help\n      This option allows you to set the kernel virtual address at which\n      the kernel will map low memory (the kernel image will be linked at\n      this address).  This can be useful in optimizing the virtual memory\n      layout of the system.\n\n      Say N here unless you know what you are doing.\n\nconfig KERNEL_START\n    hex \"Virtual address of kernel base\" if KERNEL_START_BOOL\n    default \"0xc0000000\" if MMU\n    default KERNEL_BASE_ADDR if !MMU\n\nconfig TASK_SIZE_BOOL\n    bool \"Set custom user task size\"\n    depends on ADVANCED_OPTIONS && MMU\n    help\n      This option allows you to set the amount of virtual address space\n      allocated to user tasks.  This can be useful in optimizing the\n      virtual memory layout of the system.\n\n      Say N here unless you know what you are doing.\n\nconfig TASK_SIZE\n    hex \"Size of user task space\" if TASK_SIZE_BOOL\n    default \"0x80000000\"\n\nchoice\n    prompt \"Page size\"\n    default MICROBLAZE_4K_PAGES\n    depends on ADVANCED_OPTIONS && !MMU\n    help\n      Select the kernel logical page size. Increasing the page size\n      will reduce software overhead at each page boundary, allow\n      hardware prefetch mechanisms to be more effective, and allow\n      larger dma transfers increasing IO efficiency and reducing\n      overhead. However the utilization of memory will increase.\n      For example, each cached file will using a multiple of the\n      page size to hold its contents and the difference between the\n      end of file and the end of page is wasted.\n\n      If unsure, choose 4K_PAGES.\n\nconfig MICROBLAZE_4K_PAGES\n    bool \"4k page size\"\n\nconfig MICROBLAZE_8K_PAGES\n    bool \"8k page size\"\n\nconfig MICROBLAZE_16K_PAGES\n    bool \"16k page size\"\n\nconfig MICROBLAZE_32K_PAGES\n    bool \"32k page size\"\n\nendchoice\n\nendmenu\n\nsource \"mm/Kconfig\"\n\nmenu \"Exectuable file formats\"\n\nsource \"fs/Kconfig.binfmt\"\n\nendmenu\n\nmenu \"Bus Options\"\n\nconfig PCI\n    bool \"PCI support\"\n\nconfig PCI_DOMAINS\n    def_bool PCI\n\nconfig PCI_SYSCALL\n    def_bool PCI\n\nconfig PCI_XILINX\n    bool \"Xilinx PCI host bridge support\"\n    depends on PCI\n\nsource \"drivers/pci/Kconfig\"\n\nendmenu\n\nsource \"net/Kconfig\"\n\nsource \"drivers/Kconfig\"\n\nsource \"fs/Kconfig\"\n\nsource \"arch/microblaze/Kconfig.debug\"\n\nsource \"security/Kconfig\"\n\nsource \"crypto/Kconfig\"\n\nsource \"lib/Kconfig\"\n", extra: KconfigFile { root_dir: "/home/yannp/Documents/linux-kernels/kernels/2.6.38", file: "arch/microblaze/Kconfig", fail_on_missing_source: true } }, code: Eof }
thread 'main' panicked at 'explicit panic', src/main.rs:76:17
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
